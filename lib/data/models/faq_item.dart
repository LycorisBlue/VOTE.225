import 'dart:convert';

enum FAQCategory { inscription, vote, resultats }

class FAQItem {
  final String id;
  final String question;
  final String answer;
  final FAQCategory category;
  final List<String>? tags;
  final bool hasLink;
  final String? linkUrl;
  final String? linkText;

  FAQItem({
    required this.id,
    required this.question,
    required this.answer,
    required this.category,
    this.tags,
    this.hasLink = false,
    this.linkUrl,
    this.linkText,
  });

  // Getters utilitaires
  String get categoryDisplayName {
    switch (category) {
      case FAQCategory.inscription:
        return 'Inscription';
      case FAQCategory.vote:
        return 'Vote';
      case FAQCategory.resultats:
        return 'R√©sultats';
    }
  }

  String get categoryIcon {
    switch (category) {
      case FAQCategory.inscription:
        return 'üìù';
      case FAQCategory.vote:
        return 'üó≥Ô∏è';
      case FAQCategory.resultats:
        return 'üìä';
    }
  }

  // M√©thodes de s√©rialisation
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'question': question,
      'answer': answer,
      'category': category.name,
      'tags': tags,
      'hasLink': hasLink,
      'linkUrl': linkUrl,
      'linkText': linkText,
    };
  }

  factory FAQItem.fromMap(Map<String, dynamic> map) {
    return FAQItem(
      id: map['id'] ?? '',
      question: map['question'] ?? '',
      answer: map['answer'] ?? '',
      category: FAQCategory.values.firstWhere((e) => e.name == map['category']),
      tags: map['tags'] != null ? List<String>.from(map['tags']) : null,
      hasLink: map['hasLink'] ?? false,
      linkUrl: map['linkUrl'],
      linkText: map['linkText'],
    );
  }

  String toJson() => json.encode(toMap());

  factory FAQItem.fromJson(String source) => FAQItem.fromMap(json.decode(source));

  // M√©thode copyWith pour immutabilit√©
  FAQItem copyWith({
    String? id,
    String? question,
    String? answer,
    FAQCategory? category,
    List<String>? tags,
    bool? hasLink,
    String? linkUrl,
    String? linkText,
  }) {
    return FAQItem(
      id: id ?? this.id,
      question: question ?? this.question,
      answer: answer ?? this.answer,
      category: category ?? this.category,
      tags: tags ?? this.tags,
      hasLink: hasLink ?? this.hasLink,
      linkUrl: linkUrl ?? this.linkUrl,
      linkText: linkText ?? this.linkText,
    );
  }

  // Donn√©es d'exemple pour la maquette
  static List<FAQItem> getSampleFAQItems() {
    return [
      FAQItem(
        id: '1',
        question: 'Comment s\'inscrire sur la liste √©lectorale ?',
        answer:
            'Conditions : √ätre ivoirien, avoir au moins 18 ans, jouir de ses droits civils et politiques.\n\nDocuments : CNI ou r√©c√©piss√©, certificat de nationalit√©, ou extrait d\'acte de naissance.\n\nLieu : Centres d\'enr√¥lement de la CEI partout dans le pays.\n\nP√©riode : Pendant les campagnes de r√©vision de la liste √©lectorale organis√©es par la CEI.\n\nV√©rification : En ligne sur',
        category: FAQCategory.inscription,
        hasLink: true,
        linkUrl: 'https://www.cei.ci',
        linkText: 'www.cei.ci',
        tags: ['inscription', 'documents', 'CNI', 'CEI'],
      ),
      FAQItem(
        id: '2',
        question: 'Quels documents sont n√©cessaires pour voter ?',
        answer:
            'Pour voter, vous devez pr√©senter obligatoirement votre carte d\'√©lecteur en cours de validit√©. Cette carte doit √™tre accompagn√©e d\'une pi√®ce d\'identit√© officielle (CNI, passeport, ou r√©c√©piss√© de demande de CNI).\n\nSans ces documents, l\'acc√®s au bureau de vote vous sera refus√©.',
        category: FAQCategory.vote,
        tags: ['vote', 'documents', 'carte √©lecteur', 'CNI'],
      ),
      FAQItem(
        id: '3',
        question: 'O√π trouver mon bureau de vote ?',
        answer:
            'Votre bureau de vote est indiqu√© sur votre carte d\'√©lecteur. Vous pouvez √©galement :\n\n‚Ä¢ Consulter le site web de la CEI\n‚Ä¢ Vous rendre dans les centres d\'information de la CEI\n‚Ä¢ Appeler le num√©ro vert de la CEI\n‚Ä¢ Demander dans votre mairie\n\nIl est important de v√©rifier cette information avant le jour du scrutin.',
        category: FAQCategory.vote,
        tags: ['bureau de vote', 'localisation', 'carte √©lecteur'],
      ),
      FAQItem(
        id: '4',
        question: 'Comment v√©rifier mon inscription ?',
        answer:
            'Vous pouvez v√©rifier votre inscription sur la liste √©lectorale de plusieurs fa√ßons :\n\n‚Ä¢ En ligne sur le portail de la CEI\n‚Ä¢ En vous rendant physiquement dans un centre CEI\n‚Ä¢ En consultant les listes affich√©es dans les mairies\n‚Ä¢ Par t√©l√©phone via le service client CEI\n\nCette v√©rification est gratuite et accessible 24h/24 en ligne.',
        category: FAQCategory.inscription,
        tags: ['v√©rification', 'inscription', 'liste √©lectorale'],
      ),
      FAQItem(
        id: '5',
        question: 'Quand auront lieu les prochaines √©lections ?',
        answer:
            'Le calendrier √©lectoral est √©tabli par la Commission √âlectorale Ind√©pendante (CEI) et publi√© officiellement.\n\nPour conna√Ætre les dates exactes des prochaines √©lections :\n‚Ä¢ Consultez le site officiel de la CEI\n‚Ä¢ Suivez les annonces officielles du gouvernement\n‚Ä¢ Consultez la presse nationale\n\nLes dates sont g√©n√©ralement annonc√©es plusieurs mois √† l\'avance.',
        category: FAQCategory.resultats,
        tags: ['calendrier', '√©lections', 'dates', 'CEI'],
      ),
    ];
  }

  @override
  String toString() {
    return 'FAQItem(id: $id, question: $question, category: $category)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FAQItem && other.id == id;
  }

  @override
  int get hashCode {
    return id.hashCode;
  }
}
